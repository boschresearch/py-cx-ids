# generated by datamodel-codegen:
#   filename:  http_binding_openapi.yaml
#   timestamp: 2024-06-06T10:32:04+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pycxids.models.base_model import MyBaseModel
from pydantic import Field


class DspaceFilter(MyBaseModel):
    pass


class DspaceEventType(str, Enum):
    https___w3id_org_dspace_v0_8_finalized = 'https://w3id.org/dspace/v0.8/FINALIZED'
    https___w3id_org_dspace_v0_8_accepted = 'https://w3id.org/dspace/v0.8/ACCEPTED'
    https___w3id_org_dspace_v0_8_terminated = 'https://w3id.org/dspace/v0.8/TERMINATED'


class EndpointProperties(MyBaseModel):
    field_type: Optional[str] = Field('dspace:DataAddress', alias='@type')
    dspace_name: Optional[str] = Field(None, alias='dspace:name')
    dspace_value: Optional[str] = Field(None, alias='dspace:value')


class NegotiationState(str, Enum):
    dspace_requested = 'dspace:REQUESTED'
    dspace_offered = 'dspace:OFFERED'
    dspace_accepted = 'dspace:ACCEPTED'
    dspace_agreed = 'dspace:AGREED'
    dspace_verified = 'dspace:VERIFIED'
    dspace_finalized = 'dspace:FINALIZED'
    dspace_terminated = 'dspace:TERMINATED'


class TransferState(str, Enum):
    initial = 'INITIAL'
    dspace_requested = 'dspace:REQUESTED'
    dspace_started = 'dspace:STARTED'
    dspace_terminated = 'dspace:TERMINATED'
    dspace_completed = 'dspace:COMPLETED'
    dspace_suspended = 'dspace:SUSPENDED'


class EndpointPropertyNames(str, Enum):
    https___w3id_org_edc_v0_0_1_ns_authorization = (
        'https://w3id.org/edc/v0.0.1/ns/authorization'
    )
    https___w3id_org_edc_v0_0_1_ns_endpoint = 'https://w3id.org/edc/v0.0.1/ns/endpoint'


class LanguageValue(MyBaseModel):
    field_value: Optional[str] = Field(None, alias='@value')
    field_language: Optional[str] = Field(None, alias='@language')


class JsonLd(MyBaseModel):
    field_context: Optional[str] = Field(
        'https://w3id.org/dspace/v0.8/context.json', alias='@context'
    )
    field_id: Optional[str] = Field(None, alias='@id')


class DcatDistribution(MyBaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    dct_format: Optional[str] = Field(None, alias='dct:format')
    dcat_access_service: Optional[str] = Field(None, alias='dcat:accessService')


class DcatService(MyBaseModel):
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    dct_terms: Optional[str] = Field(None, alias='dct:terms')
    dct_endpoint_url: Optional[str] = Field(None, alias='dct:endpointUrl')


class OdrlOperand(MyBaseModel):
    value: Optional[str] = None


class OdrlOperator(MyBaseModel):
    field_id: Optional[str] = Field(None, alias='@id')


class OdrlConstraint(MyBaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    odrl_left_operand: Optional[str] = Field(None, alias='odrl:leftOperand')
    odrl_operator: Optional[Union[str, OdrlOperator]] = Field(
        None, alias='odrl:operator'
    )
    odrl_right_operand: Optional[str] = Field(None, alias='odrl:rightOperand')


class OdrlLogicalConstraint(MyBaseModel):
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field('LogicalConstraint', alias='@type')
    odrl_and: Optional[Union[OdrlConstraint, List[OdrlConstraint]]] = Field(
        None, alias='odrl:and'
    )
    odrl_or: Optional[List[OdrlConstraint]] = Field(None, alias='odrl:or')


class Action(MyBaseModel):
    odrl_type: Optional[str] = Field(None, alias='odrl:type')


class OdrlRule(MyBaseModel):
    odrl_action: Union[str, Action] = Field(..., alias='odrl:action')
    odrl_constraint: Optional[
        Union[OdrlLogicalConstraint, OdrlConstraint, List[OdrlConstraint]]
    ] = Field(None, alias='odrl:constraint')


class OdrlPermission(OdrlRule):
    odrl_target: Optional[str] = Field(
        None,
        alias='odrl:target',
        description='ODRL requires this. DSP did remove it (MUST NOT) and is thinking about to get it back in again. EDC also requires it.',
    )


class OdrlPolicy(MyBaseModel):
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field('odrl:Policy', alias='@type')
    odrl_profile: Optional[str] = Field(None, alias='odrl:profile')
    odrl_permission: Optional[Union[OdrlPermission, List[OdrlPermission]]] = Field(
        None, alias='odrl:permission'
    )
    odrl_prohibition: Optional[Union[OdrlRule, List[OdrlRule]]] = Field(
        None, alias='odrl:prohibition'
    )
    odrl_obligation: Optional[Union[OdrlRule, List[OdrlRule]]] = Field(
        None, alias='odrl:obligation'
    )


class CatalogOffer(OdrlPolicy):
    field_type: Optional[str] = Field('odrl:Offer', alias='@type')


class OdrlOffer(OdrlPolicy):
    field_type: Optional[str] = Field('odrl:Offer', alias='@type')
    odrl_target: Optional[str] = Field(
        None,
        alias='odrl:target',
        description='This is used in EDC, but according to DSP model, this should be removed',
    )


class DspaceTimestamp(MyBaseModel):
    field_type: Optional[str] = Field('xsd:dateTime', alias='@type')
    field_value: Optional[str] = Field(None, alias='@value')


class CatalogRequestMessage(JsonLd):
    field_type: Optional[str] = Field('dspace:CatalogRequestMessage', alias='@type')
    filter: Optional[DspaceFilter] = None


class ContractRequestMessage(JsonLd):
    field_type: Optional[str] = Field('dspace:ContractRequestMessage', alias='@type')
    dspace_dataset: Optional[str] = Field(
        None, alias='dspace:dataset', description='@id of the dataset'
    )
    dspace_data_set: Optional[str] = Field(
        None,
        alias='dspace:dataSet',
        description='Only there for compatibility reasons. Seems to be a type in the spec',
    )
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )
    dspace_offer: Optional[OdrlOffer] = Field(None, alias='dspace:offer')
    dspace_callback_address: Optional[str] = Field(None, alias='dspace:callbackAddress')


class ContractNegotiationEventMessage(JsonLd):
    field_type: Optional[str] = Field(
        'dspace:ContractNegotiationEventMessage', alias='@type'
    )
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )
    dspace_event_type: Optional[DspaceEventType] = Field(None, alias='dspace:eventType')


class ContractAgreementVerificationMessage(JsonLd):
    field_type: Optional[str] = Field(
        'dspace:ContractAgreementVerificationMessage', alias='@type'
    )
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )


class ContractNegotiationTerminationMessage(JsonLd):
    field_type: Optional[str] = Field(
        'dspace:ContractNegotiationTerminationMessage', alias='@type'
    )
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )
    dspace_code: Optional[str] = Field(
        None, alias='dspace:code', description='TODO: not documented?'
    )
    dspace_reason: Optional[List[LanguageValue]] = Field(
        None, alias='dspace:reason', description='TODO: can be a link / @id too'
    )


class ContractOfferMessage(JsonLd):
    field_type: Optional[str] = Field('dspace:ContractOfferMessage', alias='@type')
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )
    dspace_offer: Optional[OdrlOffer] = Field(None, alias='dspace:offer')
    dspace_callback_address: Optional[str] = Field(None, alias='dspace:callbackAddress')


class ContractNegotiation(JsonLd):
    field_type: Optional[str] = Field('dspace:ContractNegotiation', alias='@type')
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )
    dspace_state: Optional[NegotiationState] = Field(None, alias='dspace:state')


class TransferRequestMessage(JsonLd):
    field_type: Optional[str] = Field('dspace:TransferRequestMessage', alias='@type')
    dspace_agreement_id: Optional[str] = Field(
        None,
        alias='dspace:agreementId',
        description='The agreementId property refers to an existing contract agreement between the consumer and provider.',
    )
    dct_format: Optional[str] = Field(
        None,
        alias='dct:format',
        description='The dct:format property is a format specified by a Distribution for the Asset associated with the agreement. This is generally obtained from the provider Catalog.',
    )
    dspace_callback_address: Optional[str] = Field(None, alias='dspace:callbackAddress')
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )


class DataAddress(MyBaseModel):
    field_type: Optional[str] = Field('dspace:DataAddress', alias='@type')
    dspace_endpoint_type: Optional[str] = Field(
        'https://w3id.org/idsa/v4.1/HTTP', alias='dspace:endpointType'
    )
    dspace_endpoint_properties: Optional[List[EndpointProperties]] = Field(
        None, alias='dspace:endpointProperties'
    )


class TransferProcess(JsonLd):
    field_type: Optional[str] = Field('dspace:TransferProcess', alias='@type')
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )
    dspace_state: Optional[TransferState] = Field(None, alias='dspace:state')


class DcatDataset(MyBaseModel):
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field('dcat:Dataset', alias='@type')
    dct_title: Optional[str] = Field(None, alias='dct:title')
    dct_description: Optional[str] = Field(None, alias='dct:description')
    dct_keyword: Optional[List[str]] = Field(None, alias='dct:keyword')
    odrl_has_policy: Optional[List[CatalogOffer]] = Field(None, alias='odrl:hasPolicy')
    dcat_distribution: Optional[DcatDistribution] = Field(
        None, alias='dcat:distribution'
    )


class DcatCatalog(JsonLd):
    field_type: Optional[str] = Field('dcat:Catalog', alias='@type')
    dct_title: Optional[str] = Field(None, alias='dct:title')
    dct_publisher: Optional[str] = Field(None, alias='dct:publisher')
    dcat_keyword: Optional[List[str]] = Field(None, alias='dcat:keyword')
    dcat_service: Optional[DcatService] = Field(None, alias='dcat:service')
    dcat_dataset: Optional[List[DcatDataset]] = Field([], alias='dcat:dataset')


class OdrlAgreement(OdrlPolicy):
    field_type: Optional[str] = Field('odrl:Agreement', alias='@type')
    odrl_target: Optional[str] = Field(None, alias='odrl:target')
    dspace_timestamp: Optional[Union[DspaceTimestamp, str]] = Field(
        None, alias='dspace:timestamp'
    )
    dspace_consumer_id: Optional[str] = Field(None, alias='dspace:consumerId')
    dspace_provider_id: Optional[str] = Field(None, alias='dspace:providerId')


class ContractAgreementMessage(JsonLd):
    field_type: Optional[str] = Field('dspace:ContractAgreementMessage', alias='@type')
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )
    dspace_agreement: Optional[OdrlAgreement] = Field(None, alias='dspace:agreement')
    dspace_callback_address: Optional[str] = Field(None, alias='dspace:callbackAddress')


class TransferStartMessage(JsonLd):
    field_type: Optional[str] = Field('dspace:TransferStartMessage', alias='@type')
    dspace_provider_pid: Optional[str] = Field(
        None,
        alias='dspace:providerPid',
        description='To identify with Provider process ID',
    )
    dspace_consumer_pid: Optional[str] = Field(
        None,
        alias='dspace:consumerPid',
        description='To identify with Provider process ID',
    )
    dspace_data_address: Optional[DataAddress] = Field(None, alias='dspace:dataAddress')
