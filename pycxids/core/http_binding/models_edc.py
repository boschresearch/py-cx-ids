# generated by datamodel-codegen:
#   filename:  edc_openapi_2023-05-26_changes.yaml
#   timestamp: 2023-06-16T09:30:41+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pycxids.models.base_model import MyBaseModel
from pydantic import Field


class ApiErrorDetail(MyBaseModel):
    invalid_value: Optional[str] = Field(None, alias='invalidValue')
    message: Optional[str] = None
    path: Optional[str] = None
    type: Optional[str] = None


class Asset(MyBaseModel):
    created_at: Optional[int] = Field(None, alias='createdAt')
    id: Optional[str] = None
    private_properties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, alias='privateProperties'
    )
    properties: Optional[Dict[str, str]] = None


class AssetResponseDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    created_at: Optional[int] = Field(None, alias='createdAt')
    private_properties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, alias='privateProperties'
    )
    properties: Optional[Dict[str, Dict[str, Any]]] = None


class AssetUpdateRequestDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_type: Optional[str] = Field(None, alias='@type')
    private_properties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, alias='privateProperties'
    )
    properties: Dict[str, Dict[str, Any]]


class CallbackAddress(MyBaseModel):
    auth_code_id: Optional[str] = Field(None, alias='authCodeId')
    auth_key: Optional[str] = Field(None, alias='authKey')
    events: Optional[List[str]] = Field(None, unique_items=True)
    transactional: Optional[bool] = None
    uri: Optional[str] = None


class CallbackAddressDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_type: Optional[str] = Field(None, alias='@type')
    auth_code_id: Optional[str] = Field(None, alias='authCodeId')
    auth_key: Optional[str] = Field(None, alias='authKey')
    events: List[str] = Field(..., unique_items=True)
    transactional: Optional[bool] = None
    uri: str


class Constraint(MyBaseModel):
    edctype: str


class Type(str, Enum):
    consumer = 'CONSUMER'
    provider = 'PROVIDER'


class ContractNegotiationDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    callback_addresses: Optional[List[CallbackAddress]] = Field(
        None, alias='callbackAddresses'
    )
    contract_agreement_id: Optional[str] = Field(None, alias='contractAgreementId')
    counter_party_address: Optional[str] = Field(None, alias='counterPartyAddress')
    created_at: Optional[int] = Field(None, alias='createdAt')
    error_detail: Optional[str] = Field(None, alias='errorDetail')
    protocol: Optional[str] = None
    state: Optional[str] = None
    type: Optional[Type] = None
    updated_at: Optional[int] = Field(None, alias='updatedAt')


class CriterionDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_type: Optional[str] = Field(None, alias='@type')
    operand_left: Dict[str, Any] = Field(..., alias='operandLeft')
    operand_right: Optional[Dict[str, Any]] = Field(None, alias='operandRight')
    operator: str


class DataAddress(MyBaseModel):
    properties: Optional[Dict[str, str]] = None


class DataAddressDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_type: Optional[str] = Field(None, alias='@type')
    properties: Dict[str, str]


class DataFlowRequest(MyBaseModel):
    callback_address: Optional[str] = Field(None, alias='callbackAddress')
    destination_data_address: Optional[DataAddress] = Field(
        None, alias='destinationDataAddress'
    )
    id: Optional[str] = None
    process_id: Optional[str] = Field(None, alias='processId')
    properties: Optional[Dict[str, str]] = None
    source_data_address: Optional[DataAddress] = Field(None, alias='sourceDataAddress')
    trace_context: Optional[Dict[str, str]] = Field(None, alias='traceContext')
    trackable: Optional[bool] = None


class DataPlaneInstance(MyBaseModel):
    allowed_dest_types: Optional[List[str]] = Field(
        None, alias='allowedDestTypes', unique_items=True
    )
    allowed_source_types: Optional[List[str]] = Field(
        None, alias='allowedSourceTypes', unique_items=True
    )
    id: Optional[str] = None
    last_active: Optional[int] = Field(None, alias='lastActive')
    properties: Optional[Dict[str, Dict[str, Any]]] = None
    turn_count: Optional[int] = Field(None, alias='turnCount')
    url: Optional[str] = None


class DataRequestDto(MyBaseModel):
    asset_id: Optional[str] = Field(None, alias='assetId')
    connector_id: Optional[str] = Field(None, alias='connectorId')
    contract_id: Optional[str] = Field(None, alias='contractId')
    id: Optional[str] = None


class DataService(MyBaseModel):
    endpoint_url: Optional[str] = Field(None, alias='endpointUrl')
    id: Optional[str] = None
    terms: Optional[str] = None


class DeprovisionedResource(MyBaseModel):
    error: Optional[bool] = None
    error_message: Optional[str] = Field(None, alias='errorMessage')
    in_process: Optional[bool] = Field(None, alias='inProcess')
    provisioned_resource_id: Optional[str] = Field(None, alias='provisionedResourceId')


class Distribution(MyBaseModel):
    data_service: Optional[DataService] = Field(None, alias='dataService')
    format: Optional[str] = None


class Failure(MyBaseModel):
    failure_detail: Optional[str] = Field(None, alias='failureDetail')
    messages: Optional[List[str]] = None


class HealthCheckResult(MyBaseModel):
    component: Optional[str] = None
    failure: Optional[Failure] = None
    is_healthy: Optional[bool] = Field(None, alias='isHealthy')


class HealthStatus(MyBaseModel):
    component_results: Optional[List[HealthCheckResult]] = Field(
        None, alias='componentResults'
    )
    is_system_healthy: Optional[bool] = Field(None, alias='isSystemHealthy')


class IdResponseDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    created_at: Optional[int] = Field(None, alias='createdAt')


class ValueType(str, Enum):
    array = 'ARRAY'
    object = 'OBJECT'
    string = 'STRING'
    number = 'NUMBER'
    true = 'TRUE'
    false = 'FALSE'
    null = 'NULL'


class JsonObject(MyBaseModel):
    empty: Optional[bool] = None
    value_type: Optional[ValueType] = Field(None, alias='valueType')


class JsonValue(MyBaseModel):
    value_type: Optional[ValueType] = Field(None, alias='valueType')


class NegotiationState(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_type: Optional[str] = Field(None, alias='@type')
    state: Optional[str] = None


class FieldType(str, Enum):
    set = 'SET'
    offer = 'OFFER'
    contract = 'CONTRACT'


class ProvisionerWebhookRequest(MyBaseModel):
    api_key_jwt: str = Field(..., alias='apiKeyJwt')
    asset_id: str = Field(..., alias='assetId')
    content_data_address: DataAddress = Field(..., alias='contentDataAddress')
    has_token: Optional[bool] = Field(None, alias='hasToken')
    resource_definition_id: str = Field(..., alias='resourceDefinitionId')
    resource_name: str = Field(..., alias='resourceName')


class SortOrder(str, Enum):
    asc = 'ASC'
    desc = 'DESC'


class QuerySpecDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_type: Optional[str] = Field(None, alias='@type')
    filter_expression: Optional[List[CriterionDto]] = Field(
        None, alias='filterExpression'
    )
    limit: Optional[int] = None
    offset: Optional[int] = None
    sort_field: Optional[str] = Field(None, alias='sortField')
    sort_order: Optional[SortOrder] = Field(None, alias='sortOrder')


class SelectionRequest(MyBaseModel):
    destination: Optional[DataAddress] = None
    source: Optional[DataAddress] = None
    strategy: Optional[str] = None


class TerminateTransferDto(MyBaseModel):
    reason: str


class TransferProcessDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    callback_addresses: Optional[List[CallbackAddressDto]] = Field(
        None, alias='callbackAddresses'
    )
    created_at: Optional[int] = Field(None, alias='createdAt')
    data_destination: Optional[DataAddressDto] = Field(None, alias='dataDestination')
    data_request: Optional[DataRequestDto] = Field(None, alias='dataRequest')
    error_detail: Optional[str] = Field(None, alias='errorDetail')
    properties: Optional[Dict[str, str]] = None
    state: Optional[str] = None
    state_timestamp: Optional[int] = Field(None, alias='stateTimestamp')
    type: Optional[str] = None
    updated_at: Optional[int] = Field(None, alias='updatedAt')


class TransferProcessFailStateDto(MyBaseModel):
    error_message: str = Field(..., alias='errorMessage')


class TransferRequestDto(MyBaseModel):
    asset_id: str = Field(..., alias='assetId')
    callback_addresses: Optional[List[CallbackAddressDto]] = Field(
        None, alias='callbackAddresses'
    )
    connector_address: str = Field(..., alias='connectorAddress')
    connector_id: str = Field(..., alias='connectorId')
    contract_id: str = Field(..., alias='contractId')
    data_destination: DataAddress = Field(..., alias='dataDestination')
    id: Optional[str] = None
    managed_resources: Optional[bool] = Field(None, alias='managedResources')
    private_properties: Optional[Dict[str, str]] = Field(
        None, alias='privateProperties'
    )
    properties: Optional[Dict[str, str]] = None
    protocol: str


class TransferState(MyBaseModel):
    state: Optional[str] = None


class Action(MyBaseModel):
    constraint: Optional[Constraint] = None
    included_in: Optional[str] = Field(None, alias='includedIn')
    type: Optional[str] = None


class AssetEntryNewDto(MyBaseModel):
    asset: Asset
    data_address: DataAddress = Field(..., alias='dataAddress')


class CatalogRequestDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_type: Optional[str] = Field(None, alias='@type')
    protocol: Optional[str] = None
    provider_url: str = Field(..., alias='providerUrl')
    query_spec: Optional[QuerySpecDto] = Field(None, alias='querySpec')


class ContractDefinitionRequestDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    access_policy_id: str = Field(..., alias='accessPolicyId')
    assets_selector: List[CriterionDto] = Field(..., alias='assetsSelector')
    contract_policy_id: str = Field(..., alias='contractPolicyId')


class ContractDefinitionResponseDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    access_policy_id: Optional[str] = Field(None, alias='accessPolicyId')
    assets_selector: Optional[List[CriterionDto]] = Field(None, alias='assetsSelector')
    contract_policy_id: Optional[str] = Field(None, alias='contractPolicyId')
    created_at: Optional[int] = Field(None, alias='createdAt')


class Prohibition(MyBaseModel):
    action: Optional[Action] = None
    assignee: Optional[str] = None
    assigner: Optional[str] = None
    constraints: Optional[List[Constraint]] = None
    target: Optional[str] = None


class Catalog(MyBaseModel):
    contract_offers: Optional[List[ContractOffer]] = Field(None, alias='contractOffers')
    data_services: Optional[List[DataService]] = Field(None, alias='dataServices')
    datasets: Optional[List[Dataset]] = None
    id: Optional[str] = None
    properties: Optional[Dict[str, Dict[str, Any]]] = None


class ContractAgreementDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_id: str = Field(..., alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    asset_id: str = Field(..., alias='assetId')
    consumer_id: str = Field(..., alias='consumerId')
    contract_signing_date: Optional[int] = Field(None, alias='contractSigningDate')
    policy: Policy
    provider_id: str = Field(..., alias='providerId')


class ContractOffer(MyBaseModel):
    asset_id: Optional[str] = Field(None, alias='assetId')
    id: Optional[str] = None
    policy: Optional[Policy] = None
    provider_id: Optional[str] = Field(None, alias='providerId')


class ContractOfferDescription(MyBaseModel):
    asset_id: str = Field(..., alias='assetId')
    offer_id: str = Field(..., alias='offerId')
    policy: Policy
    validity: Optional[int] = None


class Dataset(MyBaseModel):
    distributions: Optional[List[Distribution]] = None
    id: Optional[str] = None
    offers: Optional[Dict[str, Policy]] = None
    properties: Optional[Dict[str, Dict[str, Any]]] = None


class Duty(MyBaseModel):
    action: Optional[Action] = None
    assignee: Optional[str] = None
    assigner: Optional[str] = None
    consequence: Optional[Duty] = None
    constraints: Optional[List[Constraint]] = None
    parent_permission: Optional[Permission] = Field(None, alias='parentPermission')
    target: Optional[str] = None


class NegotiationInitiateRequestDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_type: Optional[str] = Field(None, alias='@type')
    callback_addresses: Optional[List[CallbackAddressDto]] = Field(
        None, alias='callbackAddresses'
    )
    connector_address: str = Field(..., alias='connectorAddress')
    connector_id: str = Field(..., alias='connectorId')
    consumer_id: Optional[str] = Field(None, alias='consumerId')
    offer: ContractOfferDescription
    protocol: str
    provider_id: Optional[str] = Field(None, alias='providerId')


class Permission(MyBaseModel):
    action: Optional[Action] = None
    assignee: Optional[str] = None
    assigner: Optional[str] = None
    constraints: Optional[List[Constraint]] = None
    duties: Optional[List[Duty]] = None
    target: Optional[str] = None


class Policy(MyBaseModel):
    field_type: Optional[FieldType] = Field(None, alias='@type')
    assignee: Optional[str] = None
    assigner: Optional[str] = None
    extensible_properties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, alias='extensibleProperties'
    )
    inherits_from: Optional[str] = Field(None, alias='inheritsFrom')
    obligations: Optional[List[Duty]] = None
    permissions: Optional[List[Permission]] = None
    prohibitions: Optional[List[Prohibition]] = None
    target: Optional[str] = None


class PolicyDefinitionRequestDto(MyBaseModel):
    field_id: Optional[str] = Field(None, alias='@id')
    policy: Policy


class PolicyDefinitionResponseDto(MyBaseModel):
    field_context: Optional[Dict[str, Any]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    created_at: Optional[int] = Field(None, alias='createdAt')
    policy: Policy


class PolicyDefinitionUpdateDto(MyBaseModel):
    policy: Policy


Catalog.update_forward_refs()
ContractAgreementDto.update_forward_refs()
ContractOffer.update_forward_refs()
ContractOfferDescription.update_forward_refs()
Dataset.update_forward_refs()
Duty.update_forward_refs()
